# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - 'master'
  tags:
    include:
      - '*'
pr:
  - '*'


jobs:
  - job: clangFormat
    displayName: 'clang format'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - script: |
        echo "TODO"
  - job: build
    pool:
      vmImage: $(imageName)
    strategy:
      matrix:
        windows:
          imageName: 'vs2017-win2016'
          CMAKE_ARGS: '-G "Visual Studio 15 Win64"'
          BUILD_ARGS: '--config RelWithDebInfo'
        linux:
          imageName: 'ubuntu-16.04'
          CMAKE_ARGS: '-DCMAKE_BUILD_TYPE=RelWithDebInfo'
          BUILD_ARGS: ''
        mac:
          imageName: 'macOS-10.15'
          CMAKE_ARGS: '-DCMAKE_BUILD_TYPE=RelWithDebInfo'
          BUILD_ARGS: ''
    displayName: 'Build and deploy graph-io'

    steps:
    - script: |
        mkdir build
        cd build
        cmake $(CMAKE_ARGS) ..
        cmake --build . $(BUILD_ARGS)
      displayName: 'Build'

    - script: |
        cd build
        install_name_tool -change @executable_path/libAnalyzer.dylib @rpath/libAnalyzer.dylib Analyzers/*.so
      displayName: 'MacOS fix install name'
      condition: eq( variables['Agent.OS'], 'Darwin' )

    # publish internally.
    - publish: $(System.DefaultWorkingDirectory)/build/Analyzers/RelWithDebInfo
      artifact: AnalyzerLibWin
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: 'publish Windows'
    - publish: $(System.DefaultWorkingDirectory)/build/Analyzers
      artifact: AnalyzerLibMac
      condition: eq( variables['Agent.OS'], 'Darwin' )
      displayName: 'publish MacOS'
    - publish: $(System.DefaultWorkingDirectory)/build/Analyzers
      artifact: AnalyzerLibLinux
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'publish Linux'

  - job: deploy
    dependsOn:
      - build
    displayName: 'deploy'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - download: current
      artifact: AnalyzerLibLinux
    - download: current
      artifact: AnalyzerLibWin
      patterns: '*.dll'
    - download: current
      artifact: AnalyzerLibMac
    - script: |
        export REPO_NAME=$(echo $(Build.Repository.Name) | sed 's|.*/||')
        echo $REPO_NAME
        pushd $(Build.ArtifactStagingDirectory)
        mkdir win osx linux
        popd
        cp $(Pipeline.Workspace)/AnalyzerLibWin/* $(Build.ArtifactStagingDirectory)/win
        cp $(Pipeline.Workspace)/AnalyzerLibMac/* $(Build.ArtifactStagingDirectory)/osx
        cp $(Pipeline.Workspace)/AnalyzerLibLinux/* $(Build.ArtifactStagingDirectory)/linux
        find $(Build.ArtifactStagingDirectory)
        cd $(Build.ArtifactStagingDirectory)
        zip -r ${REPO_NAME}-bin.zip .
        unzip -l ${REPO_NAME}-bin.zip
    - task: GithubRelease@0 
      displayName: 'Create GitHub Release'      
      inputs:
        gitHubConnection: github.com_Marcus10110
        repositoryName: $(Build.Repository.Name)           
        assets: $(Build.ArtifactStagingDirectory)/*.zip